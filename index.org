#+Title: Download Organizer
#+Author: Daniel Alexander Smith
#+Email: nalisarc@gmail.com
* Description
A script that when run will clean up a specific folder by placing specific file types into a designated folder.
* Imports
#+name: imports
#+BEGIN_SRC python
  import os
  import sys
  from glob import glob
#+END_SRC
* File Types And Folders
#+name: filetypes
#+BEGIN_SRC python
  FILETYPES = {
      "Documents": ("*.pdf","*.epub","*.mobi"),
      "Music": ("*.mp3","*.ogg","*.wav"),
      "Pictures": ("*.jpeg","*.jpg","*.png"),
      "Videos": ("*.mp4","*.mkv"),
      "Archives": ("*.zip", "*.tar", "*.gzip", "*.7z")
  }
#+END_SRC

#+name: mkdirs
#+BEGIN_SRC python
  def mkdirs():
      subdirs = next(os.walk("."))[1]
      for key in FILETYPES.keys():
          if key not in subdirs:
              os.mkdir(key)
          else:
              pass
      return None
#+END_SRC

#+name: movefiles
#+BEGIN_SRC python
  def movefiles():
      for ftype in FILETYPES:
          for fformat in FILETYPES[ftype]:
              filelist = glob(fformat)
              for f in filelist:
                  os.rename(f, ftype+"/"+f)
      return None
#+END_SRC

* Main
#+name: main
#+BEGIN_SRC python :noweb yes :tangle sorter.py :shebang "#!/usr/bin/env python3"
  <<imports>>

  <<filetypes>>

  <<mkdirs>>

  <<movefiles>>

  def main():
      if len(os.listdir(".")) == 0:
          #print("Empty Directory. Exiting")
          return 1
      mkdirs()
      movefiles()
      return 0

  if __name__ == '__main__':
      s = main()
      sys.exit(s)
#+END_SRC

* Tests

** Test Main
#+name: tests-main
#+BEGIN_SRC python :tangle tests.py :shebang #!/usr/bin/env python3
  import unittest
  import os
  import shutil
  import sorter
  class TestScript(unittest.TestCase):
      def setUp(self):
          #make test env
          if not os.path.isdir("./testenv"):
              os.mkdir("testenv")
          else:
              pass

          #Move into testenv
          os.chdir("./testenv")

          #make dummy files
          open("test.jpg",'a').close()
          open("test.mp3",'a').close()
          open("test.mp4",'a').close()
          open("test.zip",'a').close()
          open("test.pdf",'a').close()
          open("test.nyxie","a").close()

      def tearDown(self):
          os.chdir("../")
          shutil.rmtree("./testenv")

      def test_can_make_folders(self):
          if os.path.isdir("./Music"):
              shutil.rmtree("./Music")
          sorter.mkdirs()
          self.assertIn("Music", next(os.walk('.'))[1],
                           msg="Error Folder Not Present After Created"
          )

      def test_can_move_files(self):
          sorter.mkdirs()
          self.assertTrue(os.path.isfile("test.mp3"))
          sorter.movefiles()
          self.assertTrue(os.path.isfile("Music/test.mp3"))
          open("test.mp3","a").close()

      def test_doesnt_move_wrong_files(self):
          sorter.mkdirs()
          self.assertTrue(os.path.isfile("test.mp3"))
          sorter.movefiles()
          self.assertFalse(os.path.isfile("Documents/test.mp3"))

      def test_do_nothing_if_dir_empty(self):
          os.mkdir("./empty")
          os.chdir("./empty")
          sorter.main()
          self.assertEqual(len(os.listdir('.')),0)
          os.chdir("../")

      def test_doesnt_do_recurrsive(self):
          os.mkdir("dont-touch")
          open("dont-touch/test.pdf","a").close()
          sorter.main()
          self.assertFalse(os.path.isdir("dont-touch/Music"))

      def test_doesnt_touch_unknown_files(self):
          self.assertTrue(os.path.isfile("test.nyxie"))
          sorter.main()
          self.assertTrue(os.path.isfile("test.nyxie"))


  if __name__ == '__main__':
      unittest.main()
#+END_SRC



* wish list

** add to right click menu

** setting editor
search pattern
** scheduler
cron or scheduler depending on os
** watchdog
run whenever a file is added to a watched folder.
** config file 
** can run recursively if asked
** cli
*** Main
#+begin_src ipython :tangle cli.py 
  import click
  import pathlib
  import sys

  @click.group()
  def cli():
      """A utility for organizing folders on computers"""

      pass

  @cli.command()
  @click.option(
      "-r",
      "--recursive",
      default=False,
      type=click.BOOL,
      help="Run the process recursively",
  )
  @click.option(
      "-v",
      "--verbose",
      default=False,
      count=True,
      help= "Run the process verbosely"
  )
  @click.option(
      "-d",
      "--directory",
      default=pathlib.Path.cwd(),
      type=click.Path(exists=True),
      help="Directory to run the process in"
  )
  def run(recursive, verbose, directory):
      click.echo(f"{recursive}, {verbose}, {directory}")

  if __name__ == "__main__":
      run()
#+end_src

*** Run in folder
*** Recurisive
*** Verbose

** Gui
** Logging
** Config File
It would be nice to have a config that could potentially be loaded on a per folder level.

#+begin_src ipython :session tets
  import configparser


  def makeconfig(config="test.ini"):
      config = configparser.ConfigParser()
      config["DEFAULT"] = {}
      config["FILETYPES"] = {
	  "Documents": ("*.pdf","*.epub","*.mobi","*.docx","*.pptx","*.xslx"),
	  "Music": ("*.mp3","*.ogg","*.wav"),
	  "Pictures": ("*.jpeg","*.jpg","*.png"),
	  "Videos": ("*.mp4","*.mkv"),
	  "Archives": ("*.zip", "*.tar", "*.gzip", "*.7z")}

      with open('example.ini', 'w') as configfile:
	  config.write(configfile)
	  return None
      raise IOError
#+end_src

#+RESULTS:
: # Out[5]:
