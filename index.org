#+Title: Download Organizer
#+Author: D Smith
#+Email: nalisarc@gmail.com


* wish list

** TODO add to right click menu
Windows, Mac, and Linux all have the ability to add programs
to the context menu or whatever it's called. ideally it would be nice
to make it so that when browsing in the file explorer you could run it with a right click.
** TODO setting editor
For the gui, I want to have a nice settings editor where you can set things like:
file type to look for, scheduler, and watchdog folders.
That could also be exported and imported
** TODO FBS integration
I want this to have a nice and friendly gui that my coworkers would be comfortable using, it
This would be opensource but will require special tools to get a signed binary.


** TODO scheduler
cron or scheduler depending on os
** TODO watchdog
run whenever a file is added to a watched folder.


** DONE config file
Sorta, right now it can take tuples formatted like so:
#+begin_example
('*.{ext}')
#+end_example

however my gut tells me this isn't the best idea?
because the way I was doing it requires an eval to make sure its valid.
This means, if someone was naughty and put malicious code in your settings it could
be run.
I'm not sure if there is a way around this so I'll need to look into it further.

** TODO can run recursively if asked
In recursive mode it will grab any documents that are in sub folders
other wise it skips them which is the default.
** TODO Gui
*** TODO Pyside6
** TODO Cli
*** TODO Intigrate Rich and Click
** TODO Logging
** TODO Installer

* Core
** Imports
#+name: imports
#+BEGIN_SRC python
import pathlib
import configparser
import logging
from rich.logging import RichHandler
#+END_SRC

** mkdirs
#+name: mkdirs
#+begin_src ipython
def mkdirs(root=pathlib.Path('.')):
    for key in config['FILETYPES']:
        d = root / key
        
        if d.exists():
            log.info(f"{d} exists. skipping")
            pass
        else:
            log.info(f"creating {d}")
            d.mkdir()
            
    return None
#+end_src

** move_files
#+name: move-files
#+begin_src ipython
def move_files(root=pathlib.Path('.')):

    for file_type in config["FILETYPES"]:
        log.info(f"Processing: {file_type}")

        for file_format in eval(config.get("FILETYPES", file_type)): #dangerous figure out something better
            log.info(f"Processing: {file_format}")
            files = root.glob(file_format)

            for f in files:
                log.info(f"Moving {f} to {root / file_type / f.name}")
                f.rename(root / file_type / f.name)

    log.info("finished")
    return None
    
#+end_src

** main
#+begin_src ipython :noweb yes :tangle src/main/sepython/core.py 
<<imports>>
logging.basicConfig(filename='example.log', encoding='utf-8', level=logging.DEBUG)
CONFIGFILE = "settings.ini"

FORMAT = "%(message)s"
logging.basicConfig(
    level="NOTSET", format=FORMAT, datefmt="[%X]", handlers=[RichHandler()]
)

log = logging.getLogger("rich")

<<mkdirs>>

<<move-files>>

<<write-default-config>>

<<load-config>>
#+end_src
** Config File
It would be nice to have a config that could potentially be loaded on a per folder level.
*** Default 
#+begin_src conf :tangle setting.conf 
[FILETYPES]
documents = ('*.pdf', '*.epub', '*.mobi', '*.docx', '*.pptx', '*.xslx')
music = ('*.mp3', '*.ogg', '*.wav')
pictures = ('*.jpeg', '*.jpg', '*.png')
videos = ('*.mp4', '*.mkv')
archives = ('*.zip', '*.tar', '*.gzip', '*.7z')
#+end_src


*** Load Configuration
#+name: load-config
#+begin_src ipython
config = configparser.ConfigParser()
config.read(CONFIGFILE)
#+end_src

** Tests

#+begin_src ipython :tangle src/main/python/testscore.py 
import pytest
import core
import pathlib
import logging

logging.basicConfig(filename='test.log', encoding='utf-8', level=logging.DEBUG, filemode='w')

def test_can_make_folders(tmp_path,caplog):
    caplog.set_level(logging.DEBUG)
    # tmp_path should be clean, between tests.
    test1 = tmp_path / "music"
    assert not test1.exists()
        
    # create directories
    core.mkdirs(tmp_path)

    test2 = tmp_path / "music"
    assert test2.exists()
    
    

def test_can_move_files(tmp_path,caplog):
    caplog.set_level(logging.DEBUG)

    (tmp_path / "test.pdf").touch()
    assert (tmp_path / "test.pdf").exists()
    core.mkdirs(tmp_path)
    core.move_files(tmp_path)
    assert (tmp_path / "documents" / "test.pdf").exists()
    assert not (tmp_path / "test.pdf").exists()


def test_doesnt_touch_unknown_files(tmp_path,caplog):
    caplog.set_level(logging.DEBUG)

    (tmp_path / "test.nyxie").touch()
    assert (tmp_path / "test.nyxie").exists()
    core.mkdirs(tmp_path)
    core.move_files(tmp_path)
    assert (tmp_path / "test.nyxie").exists()

def test_skips_recurisive_by_default(tmp_path, caplog):
    caplog.set_level(logging.DEBUG)
    (tmp_path / "donttouch").mkdir()
    t = (tmp_path / "donttouch" / "secret.pdf")
    t.touch()
    assert t.exists()
    core.mkdirs(tmp_path)
    core.move_files(tmp_path)
    assert t.exists()
    assert not (tmp_path / "documents" / "secret.pdf").exists()
    

    

    

#+end_src

* cli
Right now this doesn't do anything
if you want to try the program out install it with pipenv install
and run
#+begin_example
pipenv run python 
#+end_example

and then:
#+begin_example
>>> import src/main/python/core
>>> core.mkdirs("PATH TO FOLDER")
>>> core.move_files("PATH TO FOLDER")
#+end_example

It's inconvientent for now. I'll fix this later.

** Main
#+begin_src ipython :tangle src/main/python/cli.py 
import click
import pathlib
import core

@click.group()
def cli():
    """A utility for organizing folders on computers"""

    pass

@cli.command()
@click.option(
    "-r",
    "--recursive",
    default=False,
    type=click.BOOL,
    help="Run the process recursively",
)
@click.option(
    "-v",
    "--verbose",
    default=False,
    count=True,
    help= "Run the process verbosely"
)
@click.option(
    "-d",
    "--directory",
    default=pathlib.Path.cwd(),
    type=click.Path(exists=True, file_okay=False, path_type=pathlib.Path),
    help="Directory to run the process in"
)
def run(recursive, verbose, directory):
    click.echo(f"{recursive}, {verbose}, {directory}")


if __name__ == "__main__":
    run()
#+end_src
** Tests
#+begin_src ipython :tangle src/main/python/testscli.py  
import pytest
import core
import pathlib
import logging

from click.testing import CliRunner

from cli import run

def test_cli_run():
    runner = CliRunner()
    result = runner.invoke(run, [])
#+end_src

* Pipenv Config
#+begin_src conf :tangle Pipfile :noweb yes 
[[source]]
url = "https://pypi.org/simple"
verify_ssl = true
name = "pypi"

[packages]
pyside6 = "*"
click = "*"
rich = "*"

[dev-packages]
fbs = {path = "./fbs_pro-1.0.8.tar.gz"}
pytest = "*"

[requires]
python_version = "3.9"

[scripts]
test = "<<test-script>>"
app = "<<app-script>>"
#+end_src

#+name: test-script
#+begin_src bash :prologue pipenv shell :async :results verbatim drawer
pytest src/main/python/testscore.py src/main/python/testscli.py
#+end_src

#+name: app-script
#+begin_src bash :prologue pipenv shell :async :results verbatim drawer
fbs run
#+end_src

* FBS Stuff

* Org Stuff

#+name: run-tests
#+begin_src bash :results verbatim drawer :async 
pipenv run test
#+end_src

#+RESULTS: run-tests
:results:
============================= test session starts ==============================
platform linux -- Python 3.9.5, pytest-7.1.1, pluggy-1.0.0
rootdir: /home/d/projects/folder-organizer
collected 5 items

src/main/python/testscore.py ....                                        [ 80%]
src/main/python/testscli.py .                                            [100%]

============================== 5 passed in 0.09s ===============================
:end:



#+name: run-app
#+begin_src bash :async :results verbatim drawer 
pipenv run fbs run
#+end_src

#+RESULTS: run-app
:results:
:end:

#+name: build-projectdir
#+begin_src bash :results verbatim drawer 
mkdir -p src/main/resources/base/

#+end_src

#+RESULTS: build-projectdir
:results:
:end:

* References
https://stackoverflow.com/questions/793858/how-to-mkdir-only-if-a-directory-does-not-already-exist
https://build-system.fman.io/manual/
https://stackoverflow.com/questions/60040208/access-fbs-resource-files-in-non-gui-code
https://docs.python.org/3/library/pathlib.html
https://click.palletsprojects.com/en/8.0.x/testing/
https://click.palletsprojects.com/en/8.1.x/#documentation
https://rich.readthedocs.io/en/stable/index.html

* Local Variables                                                  :noexport:
# Local Variables:
# org-src-preserve-indentation: t
# End:
